// Link statically with GLEW
#define GLEW_STATIC
#include "console\Console.h"
#include <glew.h>
#include <glfw3.h>
#include <chrono>

#define WIDTH = 1920
#define HEIGHT = 1080

Console* CONSOLE = Console::GetConsole();

void glfw_error_callback(int error, const char* description) 
{
	CONSOLE->LogAndFile("GLFW Error: %d - %s", error, description);
}

void initGLEW() 
{
	// Initialize GLEW
	glewExperimental = GL_TRUE;
	glewInit();
	CONSOLE->Log("GLEW Initalized");
}
void initGLFW()
{
	//Initalize GLFW
	if (!glfwInit()) 
	{
		CONSOLE->LogAndFile("Failed to initiate GLFW");
		exit(EXIT_FAILURE);
	}
	glfwSetErrorCallback(glfw_error_callback);
	CONSOLE->Log("GLFW Initalized");
}

// Shader sources
//responsible for outputting the vertex position on the screen (3d transformation)
/*
gl_Position = vec4(position, 0.0, 1.0);
gl_Position = vec4(position.x, position.y, 0.0, 1.0);

//colours
Make sure that the output of the vertex shader and the input of the fragment shader have the same name, or the shaders will not be linked properly.
*/
const GLchar* vertexSource = R"glsl(
    #version 150 core
    in vec2 position;
    in vec3 color;
    out vec3 Color;
    void main()
    {
        Color = color;
        gl_Position = vec4(position, 0.0, 1.0);
    }
)glsl";
const GLchar* fragmentSource = R"glsl(
    #version 150 core
    in vec3 Color;
    out vec4 outColor;
    void main()
    {
        outColor = vec4(Color, 1.0);
    }
)glsl";

int main() 
{
	auto t_start = std::chrono::high_resolution_clock::now();
	initGLFW();

	//GLFWwindow* window = glfwCreateWindow(1920, 1080, "Main", glfwGetPrimaryMonitor(), NULL);

	GLFWwindow* window = glfwCreateWindow(640, 480, "Main", NULL, NULL);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 2);
	if (!window)
	{
		CONSOLE->LogAndFile("Failed to initiate GLFW window \"Main\"");
		glfwTerminate();
		exit(EXIT_FAILURE);
	}
	glfwMakeContextCurrent(window);
	glfwSwapInterval(1);

	initGLEW();;
	// Create Vertex Array Object
	GLuint vao;
	glGenVertexArrays(1, &vao);
	glBindVertexArray(vao);

	// Create a Vertex Buffer Object and copy the vertex data to it
	//like a pointer to the buffer
	GLuint vbo;
	//generates 1 buffer in memory (GPU)
	glGenBuffers(1, &vbo);


	//adding colours 
	GLfloat vertices[] = {
		0.0f,  0.5f, 1.0f, 0.0f, 0.0f, //V1(X,Y) : Red
		0.5f, -0.5f, 0.0f, 1.0f, 0.0f, //V2(X,Y) : Green
		-0.5f, -0.5f, 0.0f, 0.0f, 1.0f //V3(X,Y) : Blue
	};
	//upload data to buffer - ARRAY_BUFFER is just a type of buffer 
	//this make the vbo the active array buffer
	glBindBuffer(GL_ARRAY_BUFFER, vbo);

	//use the vbo (now the ACTIVE_ARRAY_BUFFER)
	/*
    GL_STATIC_DRAW: The vertex data will be uploaded once and drawn many times (e.g. the world).
    GL_DYNAMIC_DRAW: The vertex data will be created once, changed from time to time, but drawn many times more than that.
    GL_STREAM_DRAW: The vertex data will be uploaded once and drawn once.

	*/
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

	//shaders are created by creating a shader object and loading data into it
	
	// Create and compile the vertex shader
	GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexShader, 1, &vertexSource, NULL);
	glCompileShader(vertexShader);

	// Create and compile the fragment shader
	GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShader, 1, &fragmentSource, NULL);
	glCompileShader(fragmentShader);

	// Link the vertex and fragment shader into a shader program
	GLuint shaderProgram = glCreateProgram();
	glAttachShader(shaderProgram, vertexShader);
	glAttachShader(shaderProgram, fragmentShader);
	glBindFragDataLocation(shaderProgram, 0, "outColor");
	glLinkProgram(shaderProgram);
	glUseProgram(shaderProgram);

	// Specify the layout of the vertex data
	//GLint posAttrib = glGetAttribLocation(shaderProgram, "position");
	GLint posAttrib = glGetAttribLocation(shaderProgram, "position");
	glEnableVertexAttribArray(posAttrib);
	glVertexAttribPointer(posAttrib, 2, GL_FLOAT, GL_FALSE,5 * sizeof(float), 0);

	GLint colAttrib = glGetAttribLocation(shaderProgram, "color");
	glEnableVertexAttribArray(colAttrib);
	glVertexAttribPointer(colAttrib, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(GLfloat), (void*)(2 * sizeof(GLfloat)));


	while (!glfwWindowShouldClose(window)) 
	{
		// Clear the screen to black
		glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		// Draw a triangle from the 3 vertices
		glDrawArrays(GL_TRIANGLES, 0, 3);
		// Clear the screen to black
		glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT);

		// Draw a triangle from the 3 vertices
		glDrawArrays(GL_TRIANGLES, 0, 3);
		glfwSwapBuffers(window);
		glfwPollEvents();
	}
	glDeleteProgram(shaderProgram);
	glDeleteShader(fragmentShader);
	glDeleteShader(vertexShader);

	glDeleteBuffers(1, &vbo);

	glDeleteVertexArrays(1, &vao);
	glfwTerminate();
	return 0;
}